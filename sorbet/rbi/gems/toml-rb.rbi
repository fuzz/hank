# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/toml-rb/all/toml-rb.rbi
#
# toml-rb-2.2.0

module TomlRB
  def self.dump(hash); end
  def self.load_file(path, symbolize_keys: nil); end
  def self.parse(content, symbolize_keys: nil); end
end
class TomlRB::Error < StandardError
end
class TomlRB::ParseError < TomlRB::Error
end
class TomlRB::ValueOverwriteError < TomlRB::Error
  def initialize(key); end
  def key; end
  def key=(arg0); end
end
module TomlRB::ArrayParser
  def value; end
end
module TomlRB::BasicString
  def self.decode_unicode(str); end
  def self.parse_error(m); end
  def self.transform_escaped_chars(str); end
  def value; end
end
module TomlRB::LiteralString
  def value; end
end
module TomlRB::MultilineString
  def value; end
end
module TomlRB::MultilineLiteral
  def value; end
end
module TomlRB::OffsetDateTimeParser
  def value; end
end
module TomlRB::LocalDateTimeParser
  def value; end
end
module TomlRB::LocalDateParser
  def value; end
end
module TomlRB::LocalTimeParser
  def value; end
end
class TomlRB::Table
  def accept_visitor(parser); end
  def ensure_key_not_defined(visited_keys); end
  def full_key; end
  def initialize(dotted_keys); end
  def navigate_keys(hash, visited_keys, symbolize_keys = nil); end
end
module TomlRB::TableParser
  def value; end
end
class TomlRB::TableArray
  def accept_visitor(parser); end
  def full_key; end
  def initialize(dotted_keys); end
  def navigate_keys(hash, symbolize_keys = nil); end
end
module TomlRB::TableArrayParser
  def value; end
end
class TomlRB::InlineTable
  def accept_visitor(keyvalue); end
  def initialize(keyvalue_pairs); end
  def value(symbolize_keys = nil); end
end
module TomlRB::InlineTableParser
  def value; end
end
class TomlRB::Keyvalue
  def accept_visitor(parser); end
  def assign(hash, fully_defined_keys, symbolize_keys = nil); end
  def dotted_key_merge(hash, update); end
  def dotted_keys; end
  def initialize(dotted_keys, value); end
  def symbolize_keys; end
  def value; end
  def visit_value(a_value); end
end
module TomlRB::KeyvalueParser
  def value; end
end
class TomlRB::Parser
  def hash; end
  def initialize(content, symbolize_keys: nil); end
  def visit_keyvalue(keyvalue); end
  def visit_table(table); end
  def visit_table_array(table_array); end
end
class TomlRB::Dumper
  def bare_key?(key); end
  def dump_nested_pairs(nested_pairs, prefix); end
  def dump_pairs(simple, nested, table_array, prefix = nil); end
  def dump_simple_pairs(simple_pairs); end
  def dump_table_array_pairs(table_array_pairs, prefix); end
  def initialize(hash); end
  def print_prefix(prefix, extra_brackets = nil); end
  def quote_key(key); end
  def sort_pairs(hash); end
  def to_toml(obj); end
  def toml_str; end
  def visit(hash, prefix, extra_brackets = nil); end
end
module TomlRB::Helper
  extend Citrus::GrammarMethods
  include Citrus::Grammar
end
module TomlRB::Primitive
  extend Citrus::GrammarMethods
  include Citrus::Grammar
  include TomlRB::Helper
end
module TomlRB::Arrays
  extend Citrus::GrammarMethods
  include Citrus::Grammar
  include TomlRB::Primitive
end
module TomlRB::Document
  extend Citrus::GrammarMethods
  include Citrus::Grammar
  include TomlRB::Arrays
  include TomlRB::Primitive
end
