# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/fiddle/all/fiddle.rbi
#
# fiddle-1.1.6

module Fiddle
  def dlopen(library); end
  def dlunwrap(arg0); end
  def dlwrap(arg0); end
  def free(arg0); end
  def malloc(arg0); end
  def realloc(arg0, arg1); end
  def self.dlopen(library); end
  def self.dlunwrap(arg0); end
  def self.dlwrap(arg0); end
  def self.free(arg0); end
  def self.last_error; end
  def self.last_error=(error); end
  def self.malloc(arg0); end
  def self.realloc(arg0, arg1); end
end
class Fiddle::Function
  def abi; end
  def call(*arg0); end
  def initialize(*arg0); end
  def name; end
  def need_gvl?; end
  def ptr; end
  def to_i; end
  def to_proc; end
end
class Fiddle::Closure
  def args; end
  def ctype; end
  def free; end
  def freed?; end
  def initialize(*arg0); end
  def self.create(*args); end
  def to_i; end
end
class Fiddle::Handle
  def [](arg0); end
  def close; end
  def close_enabled?; end
  def disable_close; end
  def enable_close; end
  def file_name; end
  def initialize(*arg0); end
  def self.[](arg0); end
  def self.sym(arg0); end
  def self.sym_defined?(arg0); end
  def sym(arg0); end
  def sym_defined?(arg0); end
  def to_i; end
  def to_ptr; end
end
class Fiddle::Pointer
  def +(arg0); end
  def +@; end
  def -(arg0); end
  def -@; end
  def <=>(arg0); end
  def ==(arg0); end
  def [](*arg0); end
  def []=(*arg0); end
  def call_free; end
  def eql?(arg0); end
  def free; end
  def free=(arg0); end
  def freed?; end
  def initialize(*arg0); end
  def inspect; end
  def null?; end
  def ptr; end
  def ref; end
  def self.[](arg0); end
  def self.malloc(*arg0); end
  def self.read(arg0, arg1); end
  def self.to_ptr(arg0); end
  def self.write(arg0, arg1); end
  def size; end
  def size=(arg0); end
  def to_i; end
  def to_int; end
  def to_s(*arg0); end
  def to_str(*arg0); end
  def to_value; end
end
class Fiddle::Pinned
  def clear; end
  def cleared?; end
  def initialize(arg0); end
  def ref; end
end
class Fiddle::MemoryView
  def [](*arg0); end
  def byte_size; end
  def format; end
  def initialize(arg0); end
  def item_size; end
  def ndim; end
  def obj; end
  def readonly?; end
  def release; end
  def self.export(arg0); end
  def shape; end
  def strides; end
  def sub_offsets; end
  def to_s; end
end
class Fiddle::Closure::BlockCaller < Fiddle::Closure
  def call(*args); end
  def initialize(ctype, args, abi = nil, &block); end
end
